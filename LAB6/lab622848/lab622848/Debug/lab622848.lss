
lab622848.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a2  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000383  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000173b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART9600>:
    {
		PORTB = buffertx;
    }
}
void initUART9600(void){
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  94:	15 b8       	out	0x05, r1	; 5
	DDRD &= ~(1<<DDD0);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Configurar el UCSR0B, tx y rx
	UCSR0B = 0;
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) |(1<<TXEN0);
  ac:	80 81       	ld	r24, Z
  ae:	88 69       	ori	r24, 0x98	; 152
  b0:	80 83       	st	Z, r24
	//Configurar UCSR0C, ASINCRONO, PARIEDAD NONE, 1 BIT STOP, DATA 8 BITS
	UCSR0C = 0;
  b2:	e2 ec       	ldi	r30, 0xC2	; 194
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	//Configurar velocidad de Baudrate: 9600
	UBRR0 = 103;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ca:	08 95       	ret

000000cc <writeUART>:
}
void writeUART(char Caracter) {
	while(!(UCSR0A & (1<<UDRE0))); //UCSR0A sea 1 
  cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <writeUART>
	UDR0 = Caracter; 
  d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d8:	08 95       	ret

000000da <main>:

volatile uint8_t buffertx;

int main(void)
{
	initUART9600();
  da:	0e 94 48 00 	call	0x90	; 0x90 <initUART9600>
	sei();
  de:	78 94       	sei
	writeUART('M');
  e0:	8d e4       	ldi	r24, 0x4D	; 77
  e2:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('e');
  e6:	85 e6       	ldi	r24, 0x65	; 101
  e8:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('n');
  ec:	8e e6       	ldi	r24, 0x6E	; 110
  ee:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('s');
  f2:	83 e7       	ldi	r24, 0x73	; 115
  f4:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('a');
  f8:	81 e6       	ldi	r24, 0x61	; 97
  fa:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('j');
  fe:	8a e6       	ldi	r24, 0x6A	; 106
 100:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('e');
 104:	85 e6       	ldi	r24, 0x65	; 101
 106:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	writeUART('\n');
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	0e 94 66 00 	call	0xcc	; 0xcc <writeUART>
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB = buffertx;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	85 b9       	out	0x05, r24	; 5
 116:	fc cf       	rjmp	.-8      	; 0x110 <main+0x36>

00000118 <__vector_18>:
void writeUART(char Caracter) {
	while(!(UCSR0A & (1<<UDRE0))); //UCSR0A sea 1 
	UDR0 = Caracter; 
}

ISR(USART_RX_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	buffertx = UDR0;
 124:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//lo que yo le mande me responde lo mismo
	while(!(UCSR0A & (1<<UDRE0))); //UCSR0A sea 1
 12c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 130:	85 ff       	sbrs	r24, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <__vector_18+0x14>
	UDR0 = buffertx;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
