
lab522848.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000717  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000174d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
		//_delay_ms(15); // Pequeña pausa para estabilizar el movimiento
	}
}
void setup(void) {
	//salidas
	UCSR0B = 0;
  90:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  98:	1b b8       	out	0x0b, r1	; 11
	DDRB |= (1<<DDB0)|(1<<DDB1);
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	84 b9       	out	0x04, r24	; 4
	
	// Configurar Timer 1 para generar PWM en modo Fast PWM
	TCCR1A |= (1 << COM1A1) | (1 << WGM11); // Configurar OC1A en modo Fast PWM
  a0:	e0 e8       	ldi	r30, 0x80	; 128
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 68       	ori	r24, 0x82	; 130
  a8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Modo Fast PWM, prescaler 8
  aa:	e1 e8       	ldi	r30, 0x81	; 129
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8a 61       	ori	r24, 0x1A	; 26
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <initADC>:
}
void initADC(void) {
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
	ADMUX = 0;
  ba:	ac e7       	ldi	r26, 0x7C	; 124
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	1c 92       	st	X, r1
	ADMUX |= (1<<REFS0);//REF 5V
  c0:	8c 91       	ld	r24, X
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8c 93       	st	X, r24
	ADMUX |= (1<<ADLAR); //LEFT
  c6:	8c 91       	ld	r24, X
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	8c 93       	st	X, r24
	ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0);
  cc:	8c 91       	ld	r24, X
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	8c 93       	st	X, r24
	ADCSRA = 0;
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1

	ADCSRA |= (1<<ADIE); //ADC INTERRUPT ON
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1); //FREC 125KHZ
  de:	80 81       	ld	r24, Z
  e0:	86 60       	ori	r24, 0x06	; 6
  e2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); //ADC ON
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
	ADCSRB = 0;
  ea:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 |= (1<<ADC0D);
  ee:	ce e7       	ldi	r28, 0x7E	; 126
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	88 81       	ld	r24, Y
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	88 83       	st	Y, r24
	ADMUX &= ~(1 << MUX0); // Selección inicial de canal ADC
  f8:	8c 91       	ld	r24, X
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC);	
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <main>:
void setup(void);
void initADC(void);

int main(void)
{
	cli();
 10a:	f8 94       	cli
	setup();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	initADC();
 110:	0e 94 5b 00 	call	0xb6	; 0xb6 <initADC>
	sei();
 114:	78 94       	sei
	ADCSRA |= (1<<ADSC);
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
	//loop principal
	while (1)
	{
		// Convertir el valor del potenciómetro a un rango de 1000 a 2000 (aproximadamente)
		// utilizando una regla de tres simple.
		uint16_t pulseWidth = (uint16_t)potValue * 11 + 1000;
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	2b e0       	ldi	r18, 0x0B	; 11
 126:	82 9f       	mul	r24, r18
 128:	c0 01       	movw	r24, r0
 12a:	11 24       	eor	r1, r1
 12c:	88 51       	subi	r24, 0x18	; 24
 12e:	9c 4f       	sbci	r25, 0xFC	; 252

		// Generar señal PWM para el servo
		OCR1A = pulseWidth;
 130:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 134:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 138:	f3 cf       	rjmp	.-26     	; 0x120 <main+0x16>

0000013a <__vector_21>:
	DIDR0 |= (1<<ADC0D);
	ADMUX &= ~(1 << MUX0); // Selección inicial de canal ADC
	ADCSRA |= (1 << ADSC);	
}
//Interrupciones
ISR(ADC_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	
	potValue = ADCH;
 14a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADIF);
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
