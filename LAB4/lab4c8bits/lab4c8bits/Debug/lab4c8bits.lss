
lab4c8bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  000002d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ac  00000000  00000000  000012d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000176  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}


void setup(void) {
	//salidas
	UCSR0B = 0;
  a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRD = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0b00001111;
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	87 b9       	out	0x07, r24	; 7
	//entradas
	DDRB &= ~(1<<DDB0)|~(1<<DDB1);
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<DDB0)|~(1<<DDB1);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	08 95       	ret

000000be <initADC>:
}
void initADC(void) {
	ADMUX = 0;
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);//REF 5V
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); //LEFT
  ca:	80 81       	ld	r24, Z
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0);
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	ADCSRA = 0;
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1

	ADCSRA |= (1<<ADIE); //ADC INTERRUPT ON
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //FREC 125KHZ
  e2:	80 81       	ld	r24, Z
  e4:	87 60       	ori	r24, 0x07	; 7
  e6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); //ADC ON
  e8:	80 81       	ld	r24, Z
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <main>:
uint8_t alta = 0; //parte alta del ADCH
uint8_t alarma = 0; 

int main(void)
{
   cli();
  f0:	f8 94       	cli
   setup();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
   initADC();
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <initADC>
   sei();
  fa:	78 94       	sei
   ADCSRA |= (1<<ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
   //loop principal
    while (1) 
    {
				
		PORTD = tabla[baja];
 106:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <baja>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 114:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 118:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000010;
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	8a e6       	ldi	r24, 0x6A	; 106
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x36>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x40>
 130:	00 00       	nop
		_delay_ms(70);
		PORTD = tabla[alta];
 132:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <alta>
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 81       	ld	r24, Z
 13e:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 140:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 144:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000100;
 146:	88 b1       	in	r24, 0x08	; 8
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	88 b9       	out	0x08, r24	; 8
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	8a e6       	ldi	r24, 0x6A	; 106
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x62>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x6c>
 15c:	00 00       	nop
		_delay_ms(70);
		PORTD = contador;
 15e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 162:	8b b9       	out	0x0b, r24	; 11
		PORTC = alarma;
 164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 168:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b00000001;
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	88 b9       	out	0x08, r24	; 8
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	8a e6       	ldi	r24, 0x6A	; 106
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x86>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x90>
 180:	00 00       	nop
		_delay_ms(70);
		//FUNCION DE ALARMA
		if(contador < ADCH) {
 182:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 186:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contador>
 18a:	89 17       	cp	r24, r25
 18c:	20 f4       	brcc	.+8      	; 0x196 <main+0xa6>
			alarma = 0x10; //encender led
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 194:	02 c0       	rjmp	.+4      	; 0x19a <main+0xaa>
		}
		else {
			alarma = 0x00; //apagar led
 196:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		}
		//CONTADOR DE 8 BITS
		actual = PINB; //Leer los botones en el puerto B.
 19a:	83 b1       	in	r24, 0x03	; 3
 19c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <actual>
		if(actual!=anterior){
 1a0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <anterior>
 1a4:	89 17       	cp	r24, r25
 1a6:	09 f4       	brne	.+2      	; 0x1aa <main+0xba>
 1a8:	ae cf       	rjmp	.-164    	; 0x106 <main+0x16>
 1aa:	8f e5       	ldi	r24, 0x5F	; 95
 1ac:	9a ee       	ldi	r25, 0xEA	; 234
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xbe>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xc4>
 1b4:	00 00       	nop
			
		_delay_ms(15); //Delay para aclarar valor
		actual = PINB;//Lectura clara
 1b6:	83 b1       	in	r24, 0x03	; 3
 1b8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <actual>
		
		if(actual!=anterior){//Si se cumple, en realidad se presiono un boton
 1bc:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <anterior>
 1c0:	89 17       	cp	r24, r25
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <main+0xd6>
 1c4:	a0 cf       	rjmp	.-192    	; 0x106 <main+0x16>
			if(!(PINB & 0x01)) {
 1c6:	18 99       	sbic	0x03, 0	; 3
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <main+0xe4>
				contador--;
 1ca:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <contador>
 1ce:	91 50       	subi	r25, 0x01	; 1
 1d0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <contador>
			}
			if(!(PINB & 0x02)) {
 1d4:	19 99       	sbic	0x03, 1	; 3
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <main+0xf2>
				contador++;
 1d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <contador>
 1dc:	9f 5f       	subi	r25, 0xFF	; 255
 1de:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <contador>
			}
			anterior=actual;
 1e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <anterior>
 1e6:	8f cf       	rjmp	.-226    	; 0x106 <main+0x16>

000001e8 <__vector_21>:
	ADCSRA |= (1<<ADIE); //ADC INTERRUPT ON
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //FREC 125KHZ
	ADCSRA |= (1<<ADEN); //ADC ON
}
//Interrupciones
ISR(ADC_vect){
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	baja = (ADCH & 0x0F); //almacenamos parte baja
 1f8:	e9 e7       	ldi	r30, 0x79	; 121
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <baja>
	alta = (ADCH & 0xF0); //almacenamos parte alta
 204:	80 81       	ld	r24, Z
	alta = alta >> 4;  //corrido 4 espacios
 206:	82 95       	swap	r24
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <alta>
	ADCSRA |= (1<<ADIF);
 20e:	ea e7       	ldi	r30, 0x7A	; 122
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 61       	ori	r24, 0x10	; 16
 216:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
